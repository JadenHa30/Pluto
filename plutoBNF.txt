{
    tokens=[
         all='regexp:[\S]+'
         space='regexp:\s+'
         identifier='regexp:[a-zA-Z][a-zA-Z0-9_]*' // remove

         integer-constant='regexp:\d+'
         string-constant='regexp:[a-zA-Z]'
         float-constant='regexp:[+-]?([0-9]*[.])?[0-9]+f'
    ]
}

<identifier> ::= P{ <all> }+

<integer> ::= { integer-constant }+

<string> ::= "\"" { string-constant }* "\""

<float> ::= { float-constant }+

<newline> :== \n

<newline-tab> :== \n\t

<assignment-operator> ::= "="
                        | "*="
                        | "/="
                        | "%="
                        | "+="
                        | "-="
                        | "<<="
                        | ">>="
                        | "&="
                        | "^="
                        | "|="

<unary-operator> ::= "&"
                   | "*"
                   | "+"
                   | "-"
                   | "~"
                   | "!"

<iteration-statement> :== in "(" {<expression>}? ";" {<expression>}? ";" {<expression>}? ")" <newline> <statement> <newline>"<<<<out"

<selection-statement> ::= hmm "(" <expression> ")" <newline-tab> <statement> <newline> <selection-continuation>

<selection-continuation> ::= "<<<<" 
                           | or <statement> <newline>"<<<<"
                           | hmm? "(" <expression> ")" <newline-tab> <statement> <newline> <selection-continuation>

<ternary-expression> ::= <expression> "?" <expression> ":" <ternary-expression-continuation>

<ternary-expression-continuation> ::= <expression> | <ternary-expression>

// START-OF-EXPRESSION

<logical-or-expression> ::= <logical-and-expression>
                          | <logical-or-expression> "||" <logical-and-expression>

<logical-and-expression> ::= <inclusive-or-expression>
                           | <logical-and-expression> "&&" <inclusive-or-expression>

<inclusive-or-expression> ::= <exclusive-or-expression>
                            | <inclusive-or-expression> "|" <exclusive-or-expression>

<exclusive-or-expression> ::= <and-expression>
                            | <exclusive-or-expression> "^" <and-expression>

<and-expression> ::= <equality-expression>
                   | <and-expression> "&" <equality-expression>

<equality-expression> ::= <relational-expression>
                        | <equality-expression> "==" <relational-expression>
                        | <equality-expression> "!=" <relational-expression>

<relational-expression> ::= <shift-expression>
                          | <relational-expression> "<" <shift-expression>
                          | <relational-expression> ">" <shift-expression>
                          | <relational-expression> "<=" <shift-expression>
                          | <relational-expression> ">=" <shift-expression>

<shift-expression> ::= <additive-expression>
                     | <shift-expression> "<<" <additive-expression>
                     | <shift-expression> ">>" <additive-expression>

<additive-expression> ::= <multiplicative-expression>
                        | <additive-expression> "+" <multiplicative-expression>
                        | <additive-expression> "-" <multiplicative-expression>

<multiplicative-expression> ::= <cast-expression>
                              | <multiplicative-expression> "*" <cast-expression>
                              | <multiplicative-expression> "/" <cast-expression>
                              | <multiplicative-expression> "%" <cast-expression>

<cast-expression> ::= <unary-expression>
                    | "(" <identifier> ")" <cast-expression>

<unary-expression> ::= "++" <unary-expression>
                    | "--" <unary-expression>
                    | <unary-operator> <cast-expression>

<conditional-expression> ::= <logical-or-expression> | <logical-or-expression> "?" <expression> ":" <conditional-expression>

<assignment-expression> ::= <conditional-expression> | <unary-expression> <assignment-operator> <assignment-expression>

<expression> ::= <assignment-expression> | <expression> "," <assignment-expression> | <ternary-expression>

<primary-expression> ::= <expression> | <function-call>

// END-OF-EXPRESSION

<variable-declaration> ::= <identifier> { string-constant }+ "=" <expression> ";"

<function-declaration> ::= <identifier> { string-constant }+ "-" [ <parameters> ] "-" <newline-tab> <block> <newline>"<<<<"

<parameters> ::= <identifier> <identifier> { "," <identifier> <identifier> }*

<block> ::= { <statement> }*

<function-call> ::= { string-constant }+"(" [ <arguments> ] ")"

<arguments> ::= <primary-expression> { "," <primary-expression> }*

<statement> ::= <variable-declaration>
              | <function-declaration>
              | <primary-expression>

<program> ::= { <statement> }*

  